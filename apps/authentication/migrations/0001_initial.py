# Generated by Django 5.2.5 on 2025-09-17 04:28

import django.utils.timezone
import shared.manager
import shared.models
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        db_default=shared.models.GenRandomUUID(),
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("phone_number", models.CharField(max_length=20, unique=True)),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("customer", "Customer"),
                            ("provider", "Provider"),
                            ("admin", "Admin"),
                            ("moderator", "Moderator"),
                        ],
                        default="customer",
                        max_length=15,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", shared.manager.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AdminUser",
            fields=[],
            options={
                "verbose_name": "Admin",
                "verbose_name_plural": "Admins",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("authentication.user",),
            managers=[
                ("objects", shared.manager.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Customer",
            fields=[],
            options={
                "verbose_name": "Customer",
                "verbose_name_plural": "Customers",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("authentication.user",),
            managers=[
                ("objects", shared.manager.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Moderator",
            fields=[],
            options={
                "verbose_name": "Moderator",
                "verbose_name_plural": "Moderators",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("authentication.user",),
            managers=[
                ("objects", shared.manager.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Provider",
            fields=[],
            options={
                "verbose_name": "Provider",
                "verbose_name_plural": "Providers",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("authentication.user",),
            managers=[
                ("objects", shared.manager.CustomUserManager()),
            ],
        ),
    ]
